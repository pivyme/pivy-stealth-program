// PIVY Stealth Payment Program — single-file `lib.rs` (SolPG-ready)
// =====================================================================
// Enhancements in this revision
// • Supports any SPL token **including wrapped SOL** (So111…)
// • `withdraw` now accepts adjustable amounts *and* auto-closes the
//   stealth ATA when its post-withdraw balance hits zero, returning the
//   rent-exempt lamports to the stealth owner. Native SOL payments are
//   achieved simply by sending wrapped SOL (WSOL) through the same path.
// ---------------------------------------------------------------------
use anchor_lang::prelude::*;
use anchor_spl::associated_token::AssociatedToken;
use anchor_spl::token::{self, CloseAccount, Mint, Token, TokenAccount, Transfer};

// Change this on deployment to the real ID generated by `anchor keys`.
declare_id!("ECytFKSRMLkWYPp1jnnCEt8AcdnUeaLfKyfr16J3SgUk");

// ────────────────────────────────────────────────────────────────────
// Custom errors
// ────────────────────────────────────────────────────────────────────
#[error_code]
pub enum StealthError {
    #[msg("Amount must be greater than zero")]
    InvalidAmount,
    #[msg("Destination token account owner mismatch")]
    DestinationOwnerMismatch,
    #[msg("Source and destination token accounts must differ")]
    SameAccount,
}

// ────────────────────────────────────────────────────────────────────
// Events
// ────────────────────────────────────────────────────────────────────
#[event]
pub struct PaymentEvent {
    pub stealth_owner: Pubkey,
    pub payer: Pubkey,
    pub mint: Pubkey,
    pub amount: u64,
    pub label: [u8; 32], // zero-padded / truncated UTF-8 tag
    pub eph_pubkey: Pubkey,
}

#[event]
pub struct WithdrawEvent {
    pub stealth_owner: Pubkey,
    pub mint: Pubkey,
    pub amount: u64,
    pub destination: Pubkey,
}

// ────────────────────────────────────────────────────────────────────
// Instruction: Pay  (works for SPL & wrapped SOL)
// ────────────────────────────────────────────────────────────────────
#[derive(Accounts)]
pub struct Pay<'info> {
    /// CHECK: Any ed25519 key — the stealth owner’s public key.
    #[account(mut)]
    pub stealth_owner: UncheckedAccount<'info>,

    #[account(
        init_if_needed,
        payer = payer,
        associated_token::mint = mint,
        associated_token::authority = stealth_owner
    )]
    pub stealth_ata: Box<Account<'info, TokenAccount>>,

    #[account(mut)]
    pub payer: Signer<'info>,

    #[account(
        mut,
        constraint = payer_ata.owner == payer.key(),
        constraint = payer_ata.mint == mint.key()
    )]
    pub payer_ata: Box<Account<'info, TokenAccount>>,

    pub mint: Box<Account<'info, Mint>>,

    pub system_program: Program<'info, System>,
    pub token_program: Program<'info, Token>,
    pub associated_token_program: Program<'info, AssociatedToken>,
    pub rent: Sysvar<'info, Rent>,
}

#[derive(AnchorSerialize, AnchorDeserialize)]
pub struct PayArgs {
    pub amount: u64,
    pub label: [u8; 32],
    pub eph_pubkey: Pubkey, // published so receiver can decrypt
}

pub fn handle_pay(ctx: Context<Pay>, args: PayArgs) -> Result<()> {
    require!(args.amount > 0, StealthError::InvalidAmount);

    let cpi_ctx = CpiContext::new(
        ctx.accounts.token_program.to_account_info(),
        Transfer {
            from: ctx.accounts.payer_ata.to_account_info(),
            to: ctx.accounts.stealth_ata.to_account_info(),
            authority: ctx.accounts.payer.to_account_info(),
        },
    );
    token::transfer(cpi_ctx, args.amount)?;

    emit!(PaymentEvent {
        stealth_owner: ctx.accounts.stealth_owner.key(),
        payer: ctx.accounts.payer.key(),
        mint: ctx.accounts.mint.key(),
        amount: args.amount,
        label: args.label,
        eph_pubkey: args.eph_pubkey,
    });

    Ok(())
}

// ────────────────────────────────────────────────────────────────────
// Instruction: Withdraw  (adjustable & auto-close)
// ────────────────────────────────────────────────────────────────────
#[derive(Accounts)]
pub struct Withdraw<'info> {
    pub stealth_owner: Signer<'info>, // signer & payable for rent refund

    #[account(
        mut,
        constraint = stealth_ata.owner == stealth_owner.key(),
        constraint = stealth_ata.mint == mint.key()
    )]
    pub stealth_ata: Box<Account<'info, TokenAccount>>,

    #[account(mut)]
    pub destination_ata: Box<Account<'info, TokenAccount>>,

    pub mint: Box<Account<'info, Mint>>,

    pub token_program: Program<'info, Token>,
}

#[derive(AnchorSerialize, AnchorDeserialize)]
pub struct WithdrawArgs {
    pub amount: u64, // pass u64::MAX for “entire balance”
}

pub fn handle_withdraw(ctx: Context<Withdraw>, args: WithdrawArgs) -> Result<()> {
    // 1. basic checks -------------------------------------------------
    require!(
        ctx.accounts.stealth_ata.key() != ctx.accounts.destination_ata.key(),
        StealthError::SameAccount
    );

    let balance_before = ctx.accounts.stealth_ata.amount;
    let amount = if args.amount == u64::MAX {
        balance_before
    } else {
        args.amount
    };

    require!(
        amount > 0 && amount <= balance_before,
        StealthError::InvalidAmount
    );
    require!(
        ctx.accounts.destination_ata.owner == ctx.accounts.stealth_owner.key(),
        StealthError::DestinationOwnerMismatch
    );

    // 2. transfer -----------------------------------------------------
    token::transfer(
        CpiContext::new(
            ctx.accounts.token_program.to_account_info(),
            Transfer {
                from: ctx.accounts.stealth_ata.to_account_info(),
                to: ctx.accounts.destination_ata.to_account_info(),
                authority: ctx.accounts.stealth_owner.to_account_info(),
            },
        ),
        amount,
    )?;

    // 3. reload + close if empty --------------------------------------
    ctx.accounts.stealth_ata.reload()?; // refresh in-memory copy
    if ctx.accounts.stealth_ata.amount == 0 {
        token::close_account(CpiContext::new(
            ctx.accounts.token_program.to_account_info(),
            CloseAccount {
                account: ctx.accounts.stealth_ata.to_account_info(),
                destination: ctx.accounts.stealth_owner.to_account_info(),
                authority: ctx.accounts.stealth_owner.to_account_info(),
            },
        ))?;
    }

    emit!(WithdrawEvent {
        stealth_owner: ctx.accounts.stealth_owner.key(),
        mint: ctx.accounts.mint.key(),
        amount,
        destination: ctx.accounts.destination_ata.key(),
    });

    Ok(())
}

// ────────────────────────────────────────────────────────────────────
// Entrypoints
// ────────────────────────────────────────────────────────────────────
#[program]
pub mod pivy_stealth {
    use super::*;

    pub fn pay(ctx: Context<Pay>, args: PayArgs) -> Result<()> {
        handle_pay(ctx, args)
    }

    pub fn withdraw(ctx: Context<Withdraw>, args: WithdrawArgs) -> Result<()> {
        handle_withdraw(ctx, args)
    }
}
