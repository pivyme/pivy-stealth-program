// PIVY Stealth Payment Program — single‑file `lib.rs` for SolPG
// =====================================================================
// Drop this file straight into your Solana Playground (SolPG) project.
// It contains the full, stateless stealth‑payment logic: `pay` and
// `withdraw` instructions plus events and custom errors.
// ---------------------------------------------------------------------
use anchor_lang::prelude::*;
use anchor_spl::token::{self, Mint, Token, TokenAccount, Transfer};
use anchor_spl::associated_token::AssociatedToken;

// Change this on deployment to the real ID generated by `anchor keys`.
declare_id!("ECytFKSRMLkWYPp1jnnCEt8AcdnUeaLfKyfr16J3SgUk");

// ────────────────────────────────────────────────────────────────────
// Custom errors
// ────────────────────────────────────────────────────────────────────
#[error_code]
pub enum StealthError {
    #[msg("Amount must be greater than zero")]
    InvalidAmount,
    #[msg("Destination token account owner mismatch")]
    DestinationOwnerMismatch,
}

// ────────────────────────────────────────────────────────────────────
// Events
// ────────────────────────────────────────────────────────────────────
#[event]
pub struct PaymentEvent {
    pub stealth_owner: Pubkey,
    pub payer: Pubkey,
    pub mint: Pubkey,
    pub amount: u64,
    pub label: [u8; 32], // zero‑padded / truncated UTF‑8 tag
    pub eph_pubkey: Pubkey,
}

#[event]
pub struct WithdrawEvent {
    pub stealth_owner: Pubkey,
    pub mint: Pubkey,
    pub amount: u64,
    pub destination: Pubkey,
}

// ────────────────────────────────────────────────────────────────────
// Instruction: Pay
// ────────────────────────────────────────────────────────────────────
#[derive(Accounts)]
pub struct Pay<'info> {
    /// CHECK: Any ed25519 key — the stealth owner’s public key.
    #[account(mut)]
    pub stealth_owner: UncheckedAccount<'info>,

    #[account(
        init_if_needed,
        payer = payer,
        associated_token::mint = mint,
        associated_token::authority = stealth_owner
    )]
    pub stealth_ata: Box<Account<'info, TokenAccount>>,

    #[account(mut)]
    pub payer: Signer<'info>,

    #[account(
        mut,
        constraint = payer_ata.owner == payer.key(),
        constraint = payer_ata.mint == mint.key()
    )]
    pub payer_ata: Box<Account<'info, TokenAccount>>,

    pub mint: Box<Account<'info, Mint>>,

    pub system_program: Program<'info, System>,
    pub token_program: Program<'info, Token>,
    pub associated_token_program: Program<'info, AssociatedToken>,
    pub rent: Sysvar<'info, Rent>,
}

#[derive(AnchorSerialize, AnchorDeserialize)]
pub struct PayArgs {
    pub amount: u64,
    pub label: [u8; 32],
    pub eph_pubkey: Pubkey, // published so receiver can decrypt
}

pub fn handle_pay(ctx: Context<Pay>, args: PayArgs) -> Result<()> {
    require!(args.amount > 0, StealthError::InvalidAmount);

    let cpi_ctx = CpiContext::new(
        ctx.accounts.token_program.to_account_info(),
        Transfer {
            from: ctx.accounts.payer_ata.to_account_info(),
            to: ctx.accounts.stealth_ata.to_account_info(),
            authority: ctx.accounts.payer.to_account_info(),
        },
    );
    token::transfer(cpi_ctx, args.amount)?;

    emit!(PaymentEvent {
        stealth_owner: ctx.accounts.stealth_owner.key(),
        payer: ctx.accounts.payer.key(),
        mint: ctx.accounts.mint.key(),
        amount: args.amount,
        label: args.label,
        eph_pubkey: args.eph_pubkey,
    });

    Ok(())
}

// ────────────────────────────────────────────────────────────────────
// Instruction: Withdraw
// ────────────────────────────────────────────────────────────────────
#[derive(Accounts)]
pub struct Withdraw<'info> {
    #[account(mut, signer)]
    pub stealth_owner: AccountInfo<'info>,

    #[account(
        mut,
        constraint = stealth_ata.owner == stealth_owner.key(),
        constraint = stealth_ata.mint == mint.key()
    )]
    pub stealth_ata: Box<Account<'info, TokenAccount>>,

    #[account(mut)]
    pub destination_ata: Box<Account<'info, TokenAccount>>,

    pub mint: Box<Account<'info, Mint>>,

    pub token_program: Program<'info, Token>,
}

#[derive(AnchorSerialize, AnchorDeserialize)]
pub struct WithdrawArgs {
    pub amount: u64, // use u64::MAX for “all”
}

pub fn handle_withdraw(ctx: Context<Withdraw>, args: WithdrawArgs) -> Result<()> {
    let amount = if args.amount == u64::MAX {
        ctx.accounts.stealth_ata.amount
    } else {
        args.amount
    };

    require!(amount > 0, StealthError::InvalidAmount);
    require!(
        ctx.accounts.destination_ata.owner == ctx.accounts.stealth_owner.key(),
        StealthError::DestinationOwnerMismatch
    );

    let cpi_ctx = CpiContext::new(
        ctx.accounts.token_program.to_account_info(),
        Transfer {
            from: ctx.accounts.stealth_ata.to_account_info(),
            to: ctx.accounts.destination_ata.to_account_info(),
            authority: ctx.accounts.stealth_owner.clone(),
        },
    );
    token::transfer(cpi_ctx, amount)?;

    emit!(WithdrawEvent {
        stealth_owner: ctx.accounts.stealth_owner.key(),
        mint: ctx.accounts.mint.key(),
        amount,
        destination: ctx.accounts.destination_ata.key(),
    });

    Ok(())
}

// ────────────────────────────────────────────────────────────────────
// Entrypoints
// ────────────────────────────────────────────────────────────────────
#[program]
pub mod pivy_stealth {
    use super::*;

    pub fn pay(ctx: Context<Pay>, args: PayArgs) -> Result<()> {
        handle_pay(ctx, args)
    }

    pub fn withdraw(ctx: Context<Withdraw>, args: WithdrawArgs) -> Result<()> {
        handle_withdraw(ctx, args)
    }
}
